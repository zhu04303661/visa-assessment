# syntax=docker/dockerfile:1.6
FROM nikolaik/python-nodejs:python3.11-nodejs20-slim
# 开发环境Dockerfile

# 国内加速源配置（apt/pip/npm）
ENV DEBIAN_FRONTEND=noninteractive \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    PIP_INDEX_URL=https://pypi.tuna.tsinghua.edu.cn/simple \
    PIP_EXTRA_INDEX_URL=https://pypi.org/simple \
    NPM_CONFIG_REGISTRY=https://registry.npmmirror.com

# 切换 apt 源到阿里镜像（兼容 Debian/Ubuntu），失败时不终止
RUN set -eux; \
    if [ -f /etc/apt/sources.list ]; then \
      sed -i 's|http://deb.debian.org|http://mirrors.aliyun.com|g; s|http://security.debian.org|http://mirrors.aliyun.com|g' /etc/apt/sources.list || true; \
      sed -i 's|http://archive.ubuntu.com|http://mirrors.aliyun.com|g; s|http://security.ubuntu.com|http://mirrors.aliyun.com|g' /etc/apt/sources.list || true; \
    fi

# 设置工作目录
WORKDIR /app

# 安装系统依赖（gcc/make/curl/证书/venv）（基础镜像已包含 Node 与 Python）
RUN set -eux; \
    if command -v apt-get >/dev/null 2>&1; then \
      apt-get update && apt-get install -y --no-install-recommends build-essential curl ca-certificates python3-venv && rm -rf /var/lib/apt/lists/*; \
    elif command -v apk >/dev/null 2>&1; then \
      apk add --no-cache build-base curl ca-certificates nodejs npm; \
    else \
      echo "No apt/apk detected, skipping system deps install"; \
    fi

# 安装 pnpm（优先使用 corepack；保持国内源配置）
RUN set -eux; \
    if command -v corepack >/dev/null 2>&1; then corepack enable; corepack prepare pnpm@10.19.0 --activate; else npm install -g pnpm; fi; \
    pnpm --version; \
    pnpm config set registry "https://registry.npmmirror.com" || true

# 复制package.json、pnpm-lock.yaml和.npmrc（前端依赖层，便于缓存）
COPY package.json pnpm-lock.yaml .npmrc ./

# 安装前端依赖（缓存 pnpm store 加速二次构建）
RUN --mount=type=cache,target=/root/.local/share/pnpm/store/v3 pnpm install --frozen-lockfile || (npm install -g pnpm && pnpm install --frozen-lockfile)

# 复制Python依赖文件与本地wheels（便于缓存与离线加速）
COPY ace_gtv/requirements.txt ./
COPY *.whl /opt/wheels/

# 创建Python虚拟环境并安装依赖（基础镜像已包含 openai/azureopenai，pip 会跳过已满足的项）
RUN python3 -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"
RUN --mount=type=cache,target=/root/.cache/pip printf "[global]\nindex-url = https://pypi.tuna.tsinghua.edu.cn/simple\nextra-index-url = https://pypi.org/simple\n" > /etc/pip.conf \
    && pip install --find-links=/opt/wheels -r requirements.txt \
    || pip install -r requirements.txt

# 复制所有源代码（包括.env.local）
COPY . .

# 创建必要的目录
RUN mkdir -p ace_gtv/data ace_gtv/personal_kb ace_gtv/resumes

# 创建开发环境启动脚本（使用heredoc确保换行正确）
RUN cat > /app/start_dev.sh <<'SH'
#!/bin/sh
set -ex

# 激活Python虚拟环境（POSIX . 语法，兼容 /bin/sh）
. /opt/venv/bin/activate

# 启动后端服务
cd /app/ace_gtv
python resume_processor.py &
python api_server_working.py &

# 等待后端服务启动
sleep 5

# 启动前端开发服务器
cd /app
exec pnpm dev
SH
RUN chmod +x /app/start_dev.sh

# 使用 /bin/sh -c 作为入口，避免登录 shell 异常
ENTRYPOINT ["/bin/sh","-c"]

# 暴露端口
EXPOSE 3000 5001 5002

# 设置环境变量
ENV NODE_ENV=development
ENV PYTHONUNBUFFERED=1

# 启动开发服务
CMD ["/app/start_dev.sh"]
